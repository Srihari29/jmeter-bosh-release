---
name: jmeter_tornado

templates:
  ctl.erb: bin/ctl
  test_plan.jmx.erb: bin/test_plan.jmx

packages:
- jmeter
- openjdk

properties:
  test_plan_xml:
    description: The JMeter test plan. Generate it using JMeter GUI. This is the contents of the .jmx file.

  record_result:
    description: "Set to true if you want to record the execution plan results. Warning: logs can grow in size very quickly, resulting in full disk."
    default: false

  jvm_xms:
    description: Xms value passed
    default: 512m
    help: |
      This Description was taken from the scripts provided by JMeter:
      # =====================================================
      # The following should be reasonably good values for most tests running
      # on Sun JVMs. Following is the analysis on which it is based. If it's total
      # gibberish to you, please study my article at
      # http://www.atg.com/portal/myatg/developer?paf_dm=full&paf_gear_id=1100010&detailArticle=true&id=9606
      # Original page has disappeared, it is now only available at:
      # https://web.archive.org/web/20060614151434/http://www.atg.com/portal/myatg/developer?paf_dm=full&paf_gear_id=1100010&detailArticle=true&id=9606
      #
      # JMeter objects can generally be grouped into three life-length groups:
      #
      # - Per-sample objects (results, DOMs,...). An awful lot of those.
      #   Life length of milliseconds to a few seconds.
      #
      # - Per-run objects (threads, listener data structures,...). Not that many
      #   of those unless we use the table or tree listeners on heavy runs.
      #   Life length of minutes to several hours, from creation to start of next run.
      #
      # - Per-work-session objects (test plans, GUIs,...).
      #   Life length: for the life of the JVM.
      #
      # This is the base heap size -- you may increase or decrease it to fit your
      # system's memory availability: -Xms512m -Xmx512m

  jvm_xmx:
    description: -Xmx value passed
    default: 512m
    help: |
      This Description was taken from the scripts provided by JMeter:
      # =====================================================
      # The following should be reasonably good values for most tests running
      # on Sun JVMs. Following is the analysis on which it is based. If it's total
      # gibberish to you, please study my article at
      # http://www.atg.com/portal/myatg/developer?paf_dm=full&paf_gear_id=1100010&detailArticle=true&id=9606
      # Original page has disappeared, it is now only available at:
      # https://web.archive.org/web/20060614151434/http://www.atg.com/portal/myatg/developer?paf_dm=full&paf_gear_id=1100010&detailArticle=true&id=9606
      #
      # JMeter objects can generally be grouped into three life-length groups:
      #
      # - Per-sample objects (results, DOMs,...). An awful lot of those.
      #   Life length of milliseconds to a few seconds.
      #
      # - Per-run objects (threads, listener data structures,...). Not that many
      #   of those unless we use the table or tree listeners on heavy runs.
      #   Life length of minutes to several hours, from creation to start of next run.
      #
      # - Per-work-session objects (test plans, GUIs,...).
      #   Life length: for the life of the JVM.
      #
      # This is the base heap size -- you may increase or decrease it to fit your
      # system's memory availability: -Xms512m -Xmx512m

  jvm_maxTenuringThreshold:
    description: JAVA Max Tenuring Threshold
    default: 2
    help: |
      This Description was taken from the scripts provided by JMeter:
      # =====================================================
      # Think about it: trying to keep per-run objects in tenuring definitely
      # represents a cost, but where's the benefit? They won't disappear before
      # the test is over, and at that point we will no longer care about performance.
      #
      # So we will have JMeter do an explicit Full GC before starting a test run,
      # but then we won't make any effort (or spend any CPU) to keep objects
      # in tenuring longer than the life of per-sample objects -- which is hopefully
      # shorter than the period between two scavenges):
      # TENURING="-XX:MaxTenuringThreshold=2"
